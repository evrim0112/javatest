// @semantic-block:logging:Application logging
public void logMessage(String level, String message) {
    if (!level.equals("INFO") && !level.equals("WARNING") && !level.equals("ERROR")) {
        throw new IllegalArgumentException("Invalid log level");
    }
    System.out.println("[" + level + "] " + message);
}
// @end-semantic-block:logging


// @semantic-block:data_processing:Data transformation utilities
public String normalizeText(String text) {
    if (text == null) {
        return "";
    }
    return text.trim().toLowerCase();
}
// @end-semantic-block:data_processing


// @semantic-block:math_utils:Mathematical helper functions
public double calculateAverage(int[] numbers) {
    if (numbers == null || numbers.length == 0) {
        return 0;
    }
    int sum = 0;
    for (int num : numbers) {
        sum += num;
    }
    return (double) sum / numbers.length;
}
// @end-semantic-block:math_utils


// @semantic-block:date_utils:Date and time operations
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public String formatDate(LocalDateTime date, String pattern) {
    if (date == null) {
        throw new IllegalArgumentException("Date cannot be null");
    }
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern != null ? pattern : "yyyy-MM-dd");
    return date.format(formatter);
}
// @end-semantic-block:date_utils


// @semantic-block:security:Security-related helpers
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public String hashPassword(String password) {
    if (password == null || password.isEmpty()) {
        throw new IllegalArgumentException("Password cannot be empty");
    }
    try {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hash = digest.digest(password.getBytes());
        StringBuilder hexString = new StringBuilder();
        for (byte b : hash) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    } catch (NoSuchAlgorithmException e) {
        throw new RuntimeException("Error hashing password", e);
    }
}
// @end-semantic-block:security
